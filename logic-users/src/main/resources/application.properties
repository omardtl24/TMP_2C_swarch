spring.application.name=logic-users

spring.config.import=optional:dotenv:.env

# --- Base de datos PostgreSQL / JPA ---
# --- spring.datasource.url=jdbc:postgresql://data_posgres:5432/${POSTGRES_INITIAL_DB}
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/${POSTGRES_INITIAL_DB}}
spring.datasource.username=${POSTGRES_SUPERUSER}
spring.datasource.password=${POSTGRES_SUPERUSER_PASSWORD}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

spring.datasource.driver-class-name=org.postgresql.Driver

# --- Base MongoDB con autenticación de root ---
# --- spring.data.mongodb.uri=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@data_mongo:27017/${MONGO_INITIAL_DB}?authSource=admin
spring.data.mongodb.uri=${SPRING_DATA_MONGODB_URI:mongodb://localhost:27017/${MONGO_INITIAL_DB}}

server.servlet.context-path=/api

# Configuración de OAuth2 para Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile

spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# --- Puerto del servidor ---
server.port=8080