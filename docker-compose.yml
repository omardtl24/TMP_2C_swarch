
services:

# Presentation Layer
  pr-frontend-web:
    container_name: pr-frontend-web
    build:
      context: ./pr-frontend-web
      dockerfile: Dockerfile
    volumes:
      - ./pr-frontend-web/app:/app/app
      - ./pr-frontend-web/public:/app/public
    env_file:
      - ./pr-frontend-web/.env
    restart: unless-stopped
    networks:
      - private

# Communication Layer
  cm-reverseproxy-web:
    container_name: cm-reverseproxy-web
    build:
      context: ./cm-reverseproxy-web
      dockerfile: Dockerfile
    ports:
      - "80:80"  
      - "443:443"
    env_file:
      - ./cm-reverseproxy-web/.env
    restart: unless-stopped
    networks:
      - public
      - private

  cm-reverseproxy-mobile:
    container_name: cm-reverseproxy-mobile
    build:
      context: ./cm-reverseproxy-mobile
      dockerfile: Dockerfile
    ports:
      - "81:80"  
      - "444:443"
    env_file:
      - ./cm-reverseproxy-mobile/.env
    restart: unless-stopped
    networks:
      - public
      - private

# --- Todo lo siguiente está en cloud y se deja comentado para referencia ---
#   cm-apigateway-loadbalancer:
#     container_name: cm-apigateway-loadbalancer
#     build:
#       context: ./cm-apigateway-loadbalancer
#       dockerfile: Dockerfile
#     depends_on:
#       - cm-apigateway-orch-1
#       - cm-apigateway-orch-2
#       - cm-apigateway-orch-3
#     restart: unless-stopped
#     networks:
#       - private
#
#   cm-apigateway-orch-1:
#     container_name: cm-apigateway-orch-1
#     build:
#       context: ./cm-apigateway-orch
#       dockerfile: Dockerfile
#     env_file:
#       - ./cm-apigateway-orch/.env
#     restart: unless-stopped
#     networks:
#       - private
#
#   cm-apigateway-orch-2:
#     container_name: cm-apigateway-orch-2
#     build:
#       context: ./cm-apigateway-orch
#       dockerfile: Dockerfile
#     env_file:
#       - ./cm-apigateway-orch/.env
#     restart: unless-stopped
#     networks:
#       - private
#
#   cm-apigateway-orch-3:
#     container_name: cm-apigateway-orch-3
#     build:
#       context: ./cm-apigateway-orch
#       dockerfile: Dockerfile
#     env_file:
#       - ./cm-apigateway-orch/.env
#     restart: unless-stopped
#     networks:
#       - private
#
#   cm-users-loadbalancer:
#     container_name: cm-users-loadbalancer
#     build:
#       context: ./cm-users-loadbalancer
#       dockerfile: Dockerfile
#     # depends_on:  # COMENTAR ESTAS LÍNEAS
#     #   - lg-users-ms-1
#     #   - lg-users-ms-2
#     #   - lg-users-ms-3
#     restart: unless-stopped
#     networks:
#       - private
#
#   cm-broker-mq:
#     image: rabbitmq:3-management
#     container_name: cm-broker-mq
#     env_file:
#       - ./cm-broker-mq/.env  
#     restart: unless-stopped
#     networks:
#       - private
#
# Logic Layer (business logic microservices)
#   lg-users-ms-1:
#     container_name: lg-users-ms-1
#     build:
#       context: ./lg-users-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-users-ms/.env
#     depends_on:
#       - data-users-db
#     restart: unless-stopped
#     networks:
#       - private
#
#   lg-users-ms-2:
#     container_name: lg-users-ms-2
#     build:
#       context: ./lg-users-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-users-ms/.env
#     depends_on:
#       - data-users-db
#     restart: unless-stopped
#     networks:
#       - private
#
#   lg-users-ms-3:
#     container_name: lg-users-ms-3
#     build:
#       context: ./lg-users-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-users-ms/.env
#     depends_on:
#       - data-users-db
#     restart: unless-stopped
#     networks:
#       - private
#
#   lg-events-ms:
#     container_name: lg-events-ms
#     build:
#       context: ./lg-events-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-events-ms/.env
#     depends_on:
#       - data-groupexpenses-db
#       - data-events-db
#     restart: unless-stopped
#     networks:
#       - private
#
#   lg-personalexpenses-ms:
#     container_name: lg-personalexpenses-ms
#     build:
#       context: ./lg-personalexpenses-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-personalexpenses-ms/.env
#     depends_on:
#       - data-personalexpenses-db
#       - cm-broker-mq
#     restart: unless-stopped
#     networks:
#       - private
#
#   lg-groupexpenses-ms:
#     container_name: lg-groupexpenses-ms
#     build:
#       context: ./lg-groupexpenses-ms
#       dockerfile: Dockerfile
#     env_file:
#       - ./lg-groupexpenses-ms/.env
#     depends_on:
#       - data-groupexpenses-db
#       - data-events-db
#       - cm-broker-mq
#     restart: unless-stopped
#     networks:
#       - private
#
# Database Layer
#   data-groupexpenses-db:
#     container_name: data-groupexpenses-db
#     build:
#       context: ./data-groupexpenses-db
#       dockerfile: Dockerfile
#     env_file:
#       - ./data-groupexpenses-db/.env
#     volumes:
#       - data-groupexpenses-db:/data/db
#     restart: unless-stopped
#     networks:
#       - private
#
#   data-users-db:
#     container_name: data-users-db
#     build:
#       context: ./data-users-db
#       dockerfile: Dockerfile
#     env_file:
#       - ./data-users-db/.env
#     volumes:
#       - data-users-db:/var/lib/postgresql/data
#     restart: unless-stopped
#     networks:
#       - private
#
#   data-events-db:
#     container_name: data-events-db
#     build:
#       context: ./data-events-db
#       dockerfile: Dockerfile
#     env_file:
#       - ./data-events-db/.env
#     volumes:
#       - data-events-db:/var/lib/postgresql/data
#     restart: unless-stopped
#     networks:
#       - private
#
#   data-personalexpenses-db:
#     container_name: data-personalexpenses-db
#     build:
#       context: ./data-personalexpenses-db
#       dockerfile: Dockerfile
#     env_file:
#       - ./data-personalexpenses-db/.env
#     volumes:
#       - data-personalexpenses-db:/var/lib/postgresql/data
#     restart: unless-stopped
#     networks:
#       - private
#
# Adminer UI
#   adminer:
#     container_name: adminer
#     image: adminer
#     ports:
#       - "8081:8080"
#     restart: unless-stopped
#     depends_on:
#       - data-events-db
#       - data-users-db
#       - data-personalexpenses-db
#     networks:
#       - private

# Networks
networks:
  public:
    driver: bridge
  private:
    driver: bridge

# Volumes
# volumes:
#   data-groupexpenses-db:
#     driver: local
#   data-users-db:
#     driver: local
#   data-events-db:
#     driver: local
#   data-personalexpenses-db:
#     driver: local